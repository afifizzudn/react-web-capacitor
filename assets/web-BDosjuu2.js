import{W as r}from"./index-D_bJV7Ui.js";class l extends r{async initConsole(i){return new Promise((e,n)=>{var o;if(typeof window<"u"&&(!((o=window.Capacitor)===null||o===void 0)&&o.Plugins.Console))try{console.log("[web.ts] Calling initConsole with id:",i.id),window.Capacitor.Plugins.Console.initConsole(i).then(s=>{console.log("[web.ts] Console initialized successfully:",s),e(s)}).catch(s=>{console.error("[web.ts] Error calling initConsole from native:",s),n(new Error("Error initializing console"))})}catch(s){console.error("[web.ts] Exception in initConsole:",s),n(new Error("Exception while initializing console"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),n(new Error("Console plugin is not available"))})}async getPermission(){return new Promise((i,e)=>{var n;if(typeof window<"u"&&(!((n=window.Capacitor)===null||n===void 0)&&n.Plugins.Console))try{console.log("[web.ts] Calling getPermission..."),window.Capacitor.Plugins.Console.getPermission().then(o=>{console.log("[web.ts] Permission fetched successfully:",o),i(o)}).catch(o=>{console.error("[web.ts] Error calling getPermission from native:",o),e(new Error("Error fetching permission"))})}catch(o){console.error("[web.ts] Exception in getPermission:",o),e(new Error("Exception while fetching permission"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),e(new Error("Console plugin is not available"))})}async test(){return new Promise((i,e)=>{var n;if(typeof window<"u"&&(!((n=window.Capacitor)===null||n===void 0)&&n.Plugins.Console))try{console.log("[web.ts] Calling test function..."),window.Capacitor.Plugins.Console.test().then(()=>{console.log("[web.ts] Test function executed successfully"),i()}).catch(o=>{console.error("[web.ts] Error calling test from native:",o),e(new Error("Error executing test function"))})}catch(o){console.error("[web.ts] Exception in test:",o),e(new Error("Exception while executing test function"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),e(new Error("Console plugin is not available"))})}}const c=new l;export{c as WebConsoleSDK,l as WebConsoleSDKWeb};
