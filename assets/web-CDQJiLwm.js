import{W as r}from"./index-r59k9F0C.js";class t extends r{async initConsole(i){return new Promise((o,n)=>{var e;if(typeof window<"u"&&(!((e=window.Capacitor)===null||e===void 0)&&e.Plugins.Console))try{console.trace("[web.ts] Calling initConsole with id:",i.id)}catch(s){console.error("[web.ts] Exception in initConsole:",s)}else console.warn("[web.ts] Console plugin not available in Capacitor")})}async getPermission(){return new Promise((i,o)=>{var n;if(typeof window<"u"&&(!((n=window.Capacitor)===null||n===void 0)&&n.Plugins.Console))try{console.log("[web.ts] Calling getPermission..."),window.Capacitor.Plugins.Console.getPermission().then(e=>{console.log("[web.ts] Permission fetched successfully:",e),i(e)}).catch(e=>{console.error("[web.ts] Error calling getPermission from native:",e),o(new Error("Error fetching permission"))})}catch(e){console.error("[web.ts] Exception in getPermission:",e),o(new Error("Exception while fetching permission"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),o(new Error("Console plugin is not available"))})}async test(){return new Promise((i,o)=>{var n;if(typeof window<"u"&&(!((n=window.Capacitor)===null||n===void 0)&&n.Plugins.Console))try{console.log("[web.ts] Calling test function..."),window.Capacitor.Plugins.Console.test().then(()=>{console.log("[web.ts] Test function executed successfully"),i()}).catch(e=>{console.error("[web.ts] Error calling test from native:",e),o(new Error("Error executing test function"))})}catch(e){console.error("[web.ts] Exception in test:",e),o(new Error("Exception while executing test function"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),o(new Error("Console plugin is not available"))})}}const c=new t;export{c as WebConsoleSDK,t as WebConsoleSDKWeb};
