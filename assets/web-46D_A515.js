import{W as s}from"./index-C1BopnRN.js";class l extends s{async initConsole(o){return new Promise((n,i)=>{var e;if(typeof window<"u"&&(!((e=window.Capacitor)===null||e===void 0)&&e.Plugins.Console))try{console.trace("[web.ts] Calling initConsole with id:",o.id),window.Capacitor.Plugins.Console.initConsole(o).then(r=>{console.log("[web.ts] Console initialized successfully:",r),n(r)}).catch(r=>{console.error("[web.ts] Error calling initConsole from native:",r),i(new Error("Error initializing console"))})}catch(r){console.error("[web.ts] Exception in initConsole:",r),i(new Error("Exception while initializing console"))}else console.warn("[web.ts] Console plugin not available in Capacitor")})}async getPermission(){var o;if(typeof window<"u"&&(!((o=window.Capacitor)===null||o===void 0)&&o.Plugins.Console))try{return console.log("[web.ts] Calling getPermission..."),await window.Capacitor.Plugins.Console.getPermission()}catch(n){throw console.error("[web.ts] Error in getPermission:",n),new Error("Error fetching permission")}else throw console.warn("[web.ts] Console plugin not available in Capacitor"),new Error("Console plugin is not available")}async test(){return new Promise((o,n)=>{var i;if(typeof window<"u"&&(!((i=window.Capacitor)===null||i===void 0)&&i.Plugins.Console))try{console.log("[web.ts] Calling test function..."),window.Capacitor.Plugins.Console.test().then(()=>{console.log("[web.ts] Test function executed successfully"),o()}).catch(e=>{console.error("[web.ts] Error calling test from native:",e),n(new Error("Error executing test function"))})}catch(e){console.error("[web.ts] Exception in test:",e),n(new Error("Exception while executing test function"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),n(new Error("Console plugin is not available"))})}}const c=new l;export{c as WebConsoleSDK,l as WebConsoleSDKWeb};
