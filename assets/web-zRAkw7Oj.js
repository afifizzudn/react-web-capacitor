import{W as t}from"./index-De5UUUsi.js";class r extends t{async initConsole(s){return new Promise((i,e)=>{var o;if(typeof window<"u"&&(!((o=window.Capacitor)===null||o===void 0)&&o.Plugins.Console))try{console.trace("[web.ts] Calling initConsole with id:",s.id),window.Capacitor.Plugins.Console.initConsole(s).then(n=>{console.log("[web.ts] Console initialized successfully:",n),i(n)}).catch(n=>{console.error("[web.ts] Error calling initConsole from native:",n),e(new Error("Error initializing console"))})}catch(n){console.error("[web.ts] Exception in initConsole:",n),e(new Error("Exception while initializing console"))}else console.warn("[web.ts] Console plugin not available in Capacitor")})}async getPermission(){throw console.warn("[web.ts] getPermission is not accessible from the web."),new Error("getPermission is not accessible from the web")}async test(){return new Promise((s,i)=>{var e;if(typeof window<"u"&&(!((e=window.Capacitor)===null||e===void 0)&&e.Plugins.Console))try{console.log("[web.ts] Calling test function..."),window.Capacitor.Plugins.Console.test().then(()=>{console.log("[web.ts] Test function executed successfully"),s()}).catch(o=>{console.error("[web.ts] Error calling test from native:",o),i(new Error("Error executing test function"))})}catch(o){console.error("[web.ts] Exception in test:",o),i(new Error("Exception while executing test function"))}else console.warn("[web.ts] Console plugin not available in Capacitor"),i(new Error("Console plugin is not available"))})}}const a=new r;export{a as WebConsoleSDK,r as WebConsoleSDKWeb};
